<?xml version="1.0"?>
<doc>
    <assembly>
        <name>StartupAgency</name>
    </assembly>
    <members>
        <member name="T:StartupAgency.Helper.OsVersion">
            <summary>
            OS version information
            </summary>
        </member>
        <member name="P:StartupAgency.Helper.OsVersion.IsVistaOrNewer">
            <summary>
            Whether OS is Windows Vista or newer
            </summary>
            <remarks>Windows Vista = version 6.0</remarks>
        </member>
        <member name="P:StartupAgency.Helper.OsVersion.Is8OrNewer">
            <summary>
            Whether OS is Windows 8 or newer
            </summary>
            <remarks>Windows 8 = version 6.2</remarks>
        </member>
        <member name="P:StartupAgency.Helper.OsVersion.Is81OrNewer">
            <summary>
            Whether OS is Windows 8.1 or newer
            </summary>
            <remarks>Windows 8.1 = version 6.3</remarks>
        </member>
        <member name="P:StartupAgency.Helper.OsVersion.Is10Threshold1OrNewer">
            <summary>
            Whether OS is Windows 10 (Threshold 1) or newer
            </summary>
            <remarks>Windows 10 (Threshold 1) = version 10.0.10240</remarks>
        </member>
        <member name="P:StartupAgency.Helper.OsVersion.Is10Redstone1OrNewer">
            <summary>
            Whether OS is Windows 10 (Redstone 1) or newer
            </summary>
            <remarks>Windows 10 (Redstone 1) = version 10.0.14393</remarks>
        </member>
        <member name="P:StartupAgency.Helper.OsVersion.Is10Redstone3OrNewer">
            <summary>
            Whether OS is Windows 10 (Redstone 3) or newer
            </summary>
            <remarks>Windows 10 (Redstone 3) = version 10.0.16299</remarks>
        </member>
        <member name="T:StartupAgency.Worker.BridgeWorker">
            <summary>
            Startup task (AppX) worker
            </summary>
        </member>
        <member name="F:StartupAgency.Worker.BridgeWorker._taskId">
            <summary>
            Startup task ID
            </summary>
            <remarks>Startup task ID must match that in AppxManifest.xml.</remarks>
        </member>
        <member name="M:StartupAgency.Worker.IStartupWorker.IsStartedOnSignIn">
            <summary>
            Whether caller instance is presumed to have started on sign in
            </summary>
        </member>
        <member name="M:StartupAgency.Worker.IStartupWorker.CanRegister">
            <summary>
            Whether caller instance can be registered in startup
            </summary>
        </member>
        <member name="M:StartupAgency.Worker.IStartupWorker.IsRegistered">
            <summary>
            Whether caller instance is registered in startup
            </summary>
        </member>
        <member name="M:StartupAgency.Worker.IStartupWorker.Register">
            <summary>
            Registers caller instance to startup.
            </summary>
        </member>
        <member name="M:StartupAgency.Worker.IStartupWorker.Unregister">
            <summary>
            Unregisters caller instance from startup.
            </summary>
        </member>
        <member name="T:StartupAgency.Worker.RegistryWorker">
            <summary>
            Registry worker
            </summary>
        </member>
        <member name="M:StartupAgency.RemotingHolder.Create(System.String,System.String[])">
            <summary>
            Creates <see cref="T:System.Threading.Semaphore"/> to start remoting.
            </summary>
            <param name="name">Name</param>
            <param name="args">Arguments to another instance</param>
            <returns>
            <para>success: True if no other instance exists and this instance successfully creates</para>
            <para>response: Response from another instance if that instance exists and returns an response</para>
            </returns>
        </member>
        <member name="M:StartupAgency.RemotingHolder.Release">
            <summary>
            Releases <see cref="T:System.Threading.Semaphore"/> to end remoting.
            </summary>
        </member>
        <member name="M:StartupAgency.RemotingSpace.Request(System.String[])">
            <summary>
            Requests the instance which instantiated this object to take an action.
            </summary>
            <param name="args">Arguments to that instance</param>
            <returns>Response from that instance</returns>
            <remarks>This method is to be called by an instance other than that instance.</remarks>
        </member>
        <member name="T:StartupAgency.StartupAgent">
            <summary>
            Startup agent
            </summary>
        </member>
        <member name="M:StartupAgency.StartupAgent.Start(System.String,System.String,System.Collections.Generic.IReadOnlyCollection{System.String})">
            <summary>
            Starts.
            </summary>
            <param name="name">Name</param>
            <param name="startupTaskId">Startup task ID</param>
            <param name="args">Arguments to another instance</param>
            <returns>
            <para>success: True if no other instance exists and this instance successfully starts</para>
            <para>response: Response from another instance if that instance exists and returns an response</para> 
            </returns>
            <remarks>Startup task ID must match that in AppxManifest.xml.</remarks>
        </member>
        <member name="M:StartupAgency.StartupAgent.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:StartupAgency.StartupAgent.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="P:StartupAgency.StartupAgent.IsPackaged">
            <summary>
            Whether this assembly is packaged in AppX package
            </summary>
        </member>
        <member name="E:StartupAgency.StartupAgent.Requested">
            <summary>
            Occurs when this instance is requested to take an action by another instance.
            </summary>
            <remarks>
            This event will be raised by a thread other than that instantiated this object.
            Accordingly, the appropriate use of dispatcher is required.
            </remarks>
        </member>
        <member name="P:StartupAgency.StartupAgent.Options">
            <summary>
            Options
            </summary>
        </member>
        <member name="M:StartupAgency.StartupAgent.IsWindowShowExpected">
            <summary>
            Whether caller instance is expected to show its window
            </summary>
            <returns>True if expected to be show its window</returns>
        </member>
        <member name="M:StartupAgency.StartupAgent.IsStartedOnSignIn">
            <summary>
            Whether caller instance is presumed to have started on sign in
            </summary>
            <returns>True if presumed to have started on sign in</returns>
        </member>
        <member name="M:StartupAgency.StartupAgent.CanRegister">
            <summary>
            Whether caller instance can be registered in startup
            </summary>
            <returns>True if can be registered</returns>
        </member>
        <member name="M:StartupAgency.StartupAgent.IsRegistered">
            <summary>
            Whether caller instance has been registered in startup
            </summary>
            <returns>True if has been already registered</returns>
        </member>
        <member name="M:StartupAgency.StartupAgent.Register">
            <summary>
            Registers caller instance to startup.
            </summary>
            <returns>True if successfully registers</returns>
        </member>
        <member name="M:StartupAgency.StartupAgent.Unregister">
            <summary>
            Unregisters caller instance from startup.
            </summary>
        </member>
        <member name="T:StartupAgency.StartupRequestEventArgs">
            <summary>
            Startup event data
            </summary>
        </member>
        <member name="P:StartupAgency.StartupRequestEventArgs.Args">
            <summary>
            Arguments (immutable)
            </summary>
        </member>
        <member name="P:StartupAgency.StartupRequestEventArgs.Response">
            <summary>
            Response (mutable)
            </summary>
            <remarks>
            This property is mutable so that an instance which responds to this event can store its response
            and then another instance which raises this event can make use of the response.
            </remarks>
        </member>
        <member name="M:StartupAgency.StartupRequestEventArgs.#ctor(System.String[])">
            <summary>
            Constructor
            </summary>
            <param name="args">Arguments</param>
        </member>
    </members>
</doc>
